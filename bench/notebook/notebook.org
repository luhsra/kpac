#+STARTUP: content
#+PROPERTY: header-args:python :session *PAC-SW Notebook*

* Init
#+begin_src python :results output
  import numpy as np
  import pandas as pd
  import matplotlib.pyplot as plt
  import csv
  import copy
  from os import path

  from pprint import pprint

  from versuchung.search import *

  import sys
  sys.path.append("../")
  import bench

  from tabulate import tabulate
  def pd2org(df):
      return tabulate(df, headers=df.columns, tablefmt='orgtbl')

  query = {
      "suite": "cortexsuite",
      "host": "zynqmp",
      "cflags": "-O2 -mbranch-protection=pac-ret",
      #"cflags": "-O2",
      "ld_preload": "/root/pac-sw/libkpac/libkpac.so",
      "libkpac_svc": "0",
      #"ld_preload": "",
      #"variant": "kpacd",
      #"scope": "all",
  }

  datapath = "../archive/cortex-zynqmp/"
  exp = search_experiment(bench.Bench, datapath, query)
  pac_raw_orig = dict(np.load(exp.o.pac.path))

  pac_raw = pac_raw_orig

  benchmarks = list(pac_raw_orig.keys())

  print(exp.path)
  pprint(exp.metadata)
#+end_src

#+RESULTS:
#+begin_example
/srv/scratch/ill.ostapyshyn/proj/kpac/pac-sw/bench/archive/cortex-zynqmp/Bench-850d382456785dfccb3167d36a14bb2e
{'arch': 'aarch64',
 'backend': 'xxhash',
 'cflags': '-O2 -mbranch-protection=pac-ret',
 'cpumasks': '3=2',
 'date-end': '2023-10-10 02:08:20.248834',
 'date-start': '2023-10-10 01:15:46.939408',
 'experiment-hash': '850d382456785dfccb3167d36a14bb2e',
 'experiment-name': 'Bench',
 'experiment-version': 1,
 'host': 'zynqmp',
 'kernel': 'Linux 6.1.0-kpac-xilinx+ #21 SMP Mon Oct  9 12:50:00 CEST 2023',
 'ld_preload': '/root/pac-sw/libkpac/libkpac.so',
 'libkpac_svc': '0',
 'scope': 'nil',
 'suite': 'cortexsuite',
 'variant': 'syscall'}
#+end_example

** Remove outliers
#+begin_src python :results value raw :noeval
  def mask_std(v, n):
      mean = v.mean()
      std = v.std()

      return np.ma.masked_outside(v, mean-n*std, mean+n*std)

  masked_pd = pd.DataFrame(index=benchmarks)

  pac_raw = {k: mask_std(v, 2) for k, v in pac_raw_orig.items()}
  masked_pd["masked_pac"] = [ np.ma.count_masked(v) for v in pac_raw.values() ]

  pd2org(masked_pd)
#+end_src

#+RESULTS:
|                   | masked_pac |
|-------------------+------------|
| liblinear         |          0 |
| kmeans            |          0 |
| spectral          |          0 |
| lda               |          0 |
| motion-estimation |          0 |
| pca               |          0 |
| rbm               |          0 |
| sphinx            |          0 |
| srr               |          0 |
| svd3              |          0 |

** Plot
#+begin_src python :results file :noeval
  figure, axis = plt.subplots(len(benchmarks), 1, figsize=(40,160))

  i = 0
  for k, v in pac_raw.items():
      axis[i].plot(v)
      axis[i].set_title(k)
      i+=1

  f = "raw.pdf"
  plt.savefig(f)
  f
#+end_src

#+RESULTS:
[[file:raw.pdf]]

* Statistics
** Functions
#+begin_src python :results value raw
  build = pd.read_csv(exp.o.build.path, index_col='name')
  pd2org(build)
#+end_src

#+RESULTS:
|                   | inst | total |       auths |
|-------------------+------+-------+-------------|
| liblinear         |    0 |   280 |       12520 |
| kmeans            |    0 |    24 |           3 |
| spectral          |    0 |    45 |           8 |
| lda               |    0 |   111 | 5.73831e+07 |
| motion-estimation |    0 |    45 |      182594 |
| pca               |    0 |    45 |          12 |
| rbm               |    0 |    54 | 3.20442e+06 |
| sphinx            |    0 |   871 | 2.56076e+07 |
| srr               |    0 |   108 |      878138 |
| svd3              |    0 |    77 |      352754 |

** libkpac

#+begin_src python :results value raw
  libkpac_raw = {}

  for benchmark in benchmarks:
      try:
          with open(os.path.join(exp.o.libkpac_stat.path, benchmark + '.csv')) as f:
              reader = csv.reader(f, delimiter=',')
              totals = list(filter(lambda x: x[2] == 'TOTAL', reader))

              libkpac_raw[benchmark] = {
                  'times': np.asarray([float(i[3]) for i in totals]),
                  'pac': (int(totals[0][4]), int(totals[0][5])),
                  'aut': (int(totals[0][6]), int(totals[0][7]))
              }
      except IOError:
          libkpac_raw[benchmark] = {
              'times': np.array([0] * len(pac_raw[k])),
              'pac': (0, 0),
              'aut': (0, 0)
          }

  pac_raw_old = copy.deepcopy(pac_raw)

  if 'libkpac.so' in exp.metadata['ld_preload']:
      for k in pac_raw.keys():
          pac_raw[k] = pac_raw[k] - libkpac_raw[k]['times']

  libkpac = pd.DataFrame.from_dict(libkpac_raw, orient='index')
  libkpac['avg'] = libkpac['times'].map(np.mean)
  del libkpac['times']

  libkpac['total_loci'] = libkpac.apply(lambda x: x['pac'][0]+x['aut'][0], axis=1)
  libkpac['succ_loci'] = libkpac.apply(lambda x: x['pac'][1]+x['aut'][1], axis=1)
  libkpac['ratio'] = libkpac['succ_loci'] / libkpac['total_loci']

  pd2org(libkpac)
#+end_src

#+RESULTS:
|                   | pac        | aut        |        avg | total_loci | succ_loci |    ratio |
|-------------------+------------+------------+------------+------------+-----------+----------|
| liblinear         | (56, 52)   | (61, 56)   |  0.0123481 |        117 |       108 | 0.923077 |
| kmeans            | (4, 3)     | (4, 3)     | 0.00897793 |          8 |         6 |     0.75 |
| spectral          | (9, 8)     | (9, 8)     |  0.0115791 |         18 |        16 | 0.888889 |
| lda               | (26, 25)   | (27, 27)   |  0.0117256 |         53 |        52 | 0.981132 |
| motion-estimation | (9, 8)     | (11, 10)   | 0.00896329 |         20 |        18 |      0.9 |
| pca               | (9, 9)     | (8, 8)     |  0.0115384 |         17 |        17 |        1 |
| rbm               | (13, 9)    | (13, 9)    |  0.0114868 |         26 |        18 | 0.692308 |
| sphinx            | (640, 623) | (726, 710) |  0.0189321 |       1366 |      1333 | 0.975842 |
| srr               | (18, 12)   | (19, 16)   | 0.00914227 |         37 |        28 | 0.756757 |
| svd3              | (67, 67)   | (67, 67)   |  0.0121842 |        134 |       134 |        1 |

** Runtime
#+begin_src python :results value raw
  pac = pd.DataFrame({
      "mean": { k: v.mean() for k, v in pac_raw.items() },
      "std": { k: v.std() for k, v in pac_raw.items() },
      "min": { k: v.min() for k, v in pac_raw.items() },
      "max": { k: v.max() for k, v in pac_raw.items() },
  })

  pac["rstd"] = pac["std"]/pac["mean"]
  pac["rmax"] = pac["max"]/pac["mean"]-1
  pac["rmin"] = 1-pac["min"]/pac["mean"]

  pd2org(pac)
#+end_src

#+RESULTS:
|                   |    mean |        std |     min |     max |        rstd |        rmax |        rmin |
|-------------------+---------+------------+---------+---------+-------------+-------------+-------------|
| liblinear         | 25.5205 |  0.0503378 | 25.4613 |  25.597 |  0.00197245 |  0.00299827 |  0.00231781 |
| kmeans            | 33.5686 |  0.0205991 | 33.5343 | 33.5965 |  0.00061364 |  0.00082951 |  0.00102271 |
| spectral          | 6.94109 |  0.0068552 | 6.93238 | 6.95704 | 0.000987627 |  0.00229888 |  0.00125413 |
| lda               | 101.367 |  0.0239187 | 101.322 |   101.4 | 0.000235961 | 0.000326801 |  0.00044931 |
| motion-estimation | 9.72438 | 0.00235057 | 9.72249 |  9.7308 | 0.000241719 |  0.00065949 | 0.000194312 |
| pca               |  3.2904 | 0.00782403 | 3.27811 | 3.30326 |  0.00237783 |   0.0039081 |  0.00373451 |
| rbm               |  22.815 |  0.0565138 | 22.7538 |  22.922 |  0.00247705 |  0.00469133 |  0.00268174 |
| sphinx            | 30.7954 |  0.0249347 | 30.7621 | 30.8293 | 0.000809689 |   0.0011024 |   0.0010802 |
| srr               | 31.6663 |   0.049126 | 31.5801 | 31.7424 |  0.00155137 |  0.00240264 |  0.00272221 |
| svd3              | 14.7209 |  0.0557135 | 14.6544 |  14.835 |  0.00378465 |  0.00775334 |  0.00451676 |

* Overhead
** Load baseline

#+begin_src python :results value raw
  query_nil = {
      'suite': query['suite'],
      'host': query['host'],
      'scope': 'nil',
      'cflags': '-O2',
      'ld_preload': ''
  }
  #query_nil = query
  #query_nil['cflags'] = ''

  exp_nil = search_experiment(bench.Bench, datapath, query_nil)
  print(exp_nil)

  nopac_raw_orig = dict(np.load(exp_nil.o.pac.path))
  nopac_raw = nopac_raw_orig

  nopac = pd.DataFrame({
      "mean": { k: v.mean() for k, v in nopac_raw.items() },
      "std": { k: v.std() for k, v in nopac_raw.items() },
      "min": { k: v.min() for k, v in nopac_raw.items() },
      "max": { k: v.max() for k, v in nopac_raw.items() },
  })

  nopac["rstd"] = nopac["std"]/nopac["mean"]
  nopac["rmax"] = nopac["max"]/nopac["mean"]-1
  nopac["rmin"] = 1-nopac["min"]/nopac["mean"]

  pd2org(nopac)  
#+end_src

#+RESULTS:
|                   |    mean |        std |     min |     max |        rstd |        rmax |        rmin |
|-------------------+---------+------------+---------+---------+-------------+-------------+-------------|
| liblinear         | 25.5822 |  0.0648813 | 25.4912 | 25.7118 |  0.00253619 |  0.00506499 |  0.00355719 |
| kmeans            |  33.758 |  0.0301964 | 33.7098 | 33.8236 | 0.000894496 |  0.00194467 |  0.00142724 |
| spectral          | 6.95619 | 0.00955179 |  6.9462 | 6.97488 |  0.00137313 |  0.00268595 |  0.00143742 |
| lda               | 18.2557 |  0.0237724 | 18.2331 | 18.3139 |  0.00130219 |   0.0031853 |  0.00123639 |
| motion-estimation | 9.62571 |  0.0019906 | 9.62253 | 9.62818 |   0.0002068 | 0.000256251 | 0.000330756 |
| pca               | 3.29359 |  0.0099452 | 3.27797 | 3.31189 |  0.00301957 |  0.00555639 |  0.00474206 |
| rbm               | 21.0757 |  0.0663379 | 20.9165 | 21.1712 |  0.00314761 |  0.00453375 |  0.00755221 |
| sphinx            | 12.3958 |  0.0107009 | 12.3838 | 12.4187 | 0.000863263 |  0.00184494 | 0.000968984 |
| srr               | 29.3399 |  0.0258564 | 29.2877 | 29.3734 | 0.000881271 |  0.00114161 |  0.00177915 |
| svd3              | 14.6156 |   0.185948 | 14.4067 | 14.9475 |   0.0127226 |   0.0227118 |   0.0142913 |

** Evaluate

#+begin_src python :results value raw
  slowdown = pac["mean"] - nopac["mean"]
  freq = int(exp.o.scaling_cur_freq.value)*1e3

  oh = pd.DataFrame()
  oh['duration'] = pac['mean']
  oh["overhead"] = pac['mean'] / nopac["mean"]
  oh["aut_s"] = 1/pac["mean"] * build["auths"]
  oh["cycles"] = slowdown/build["auths"] * freq / 2
  oh["loci"] = libkpac['total_loci']
  oh["success"] = libkpac['ratio']

  oh = oh.sort_values("overhead", ascending = False)

  pd2org(oh)
#+end_src

#+RESULTS:
|                   | duration | overhead |     aut_s |       cycles | loci |  success |
|-------------------+----------+----------+-----------+--------------+------+----------|
| lda               |  101.367 |  5.55263 |    566091 |      869.017 |   53 | 0.981132 |
| sphinx            |  30.7954 |  2.48433 |    831539 |      431.111 | 1366 | 0.975842 |
| rbm               |   22.815 |  1.08253 |    140452 |      325.676 |   26 | 0.692308 |
| srr               |  31.6663 |  1.07929 |     27731 |      1589.57 |   37 | 0.756757 |
| motion-estimation |  9.72438 |  1.01025 |   18776.9 |      324.235 |   20 |      0.9 |
| svd3              |  14.7209 |  1.00721 |   23962.8 |      179.169 |  134 |        1 |
| pca               |   3.2904 | 0.999034 |   3.64697 |      -159158 |   17 |        1 |
| spectral          |  6.94109 | 0.997828 |   1.15256 | -1.13301e+06 |   18 | 0.888889 |
| liblinear         |  25.5205 | 0.997585 |   490.587 |     -2960.89 |  117 | 0.923077 |
| kmeans            |  33.5686 | 0.994392 | 0.0893691 | -3.78659e+07 |    8 |     0.75 |
